diff --git a/src/app.js b/src/app.js
index e867ba4..e13c88b 100644
--- a/src/app.js
+++ b/src/app.js
@@ -1,11 +1,16 @@
 const express = require('express');
 const path = require('path');
 const methodOverride = require('method-override');
-const app = express();
 const session = require('express-session');
-const userLoggedMiddleware = require('../src/middlewares/userLoggedMiddleware');
 const cookies = require('cookie-parser');
 
+const userLoggedMiddleware   = require('./middlewares/userLoggedMiddleware');
+const cookieLogingMiddleware = require('./middlewares/cookieLogingMiddleware');
+const errorMiddleware = require('./middlewares/errorMiddleware');
+
+const app = express();
+
+
 // load process variables from .env if not in production
 // (in production they should be set as enviroment variables)
 if (process.env.NODE_ENV !== 'production') {
@@ -31,7 +36,9 @@ app.use(session( {
     saveUninitialized: false
 }))
 app.use(cookies());
+app.use(cookieLogingMiddleware);
 app.use(userLoggedMiddleware);
+app.use(errorMiddleware);
 
 
 // routers
diff --git a/src/controllers/productsController.js b/src/controllers/productsController.js
index 933086f..66cb62f 100644
--- a/src/controllers/productsController.js
+++ b/src/controllers/productsController.js
@@ -2,8 +2,35 @@ const db = require('../database/models');
 
 const controller = {
 	index: (req,res) => {
-		db.Product.findAll()
-			.then(productsJson => res.render('products/products', {productsJson}))
+		const whereClause = {};
+		let query = '';
+		if (req.query.q) {
+			// https://thispointer.com/javascript-replace-multiple-spaces-with-a-single-space/
+			query = req.query.q.trim().replace(/\s+/g, " ");
+			const wordsSearch = query.split(" ");
+
+			if (wordsSearch.length === 1) {
+				whereClause['where'] = {
+					name: {
+						[db.Sequelize.Op.like]: `%${wordsSearch[0]}%`
+					}
+				}	
+			} else {
+				// transform words to array of clauses to be used in [Op.and]
+				const opAndClauses = wordsSearch.reduce((ac, val) => [...ac, 
+					{ name: { 
+								[db.Sequelize.Op.like]: `%${val}%`
+							}
+					}], []);
+
+				whereClause['where'] = {
+					[db.Sequelize.Op.and]: opAndClauses
+				}
+			}
+		}
+console.log(whereClause)
+		db.Product.findAll(whereClause)
+			.then(productsJson => res.render('products/products', {productsJson, query}))
 			.catch(res.send);
 	},
     detail: (req,res) => {
diff --git a/src/controllers/usersController.js b/src/controllers/usersController.js
index dfa83a3..4226072 100644
--- a/src/controllers/usersController.js
+++ b/src/controllers/usersController.js
@@ -1,91 +1,102 @@
-const fs = require('fs');
 const bcrypt = require('bcryptjs');
 const {validationResult} = require('express-validator');
-const User = require('../models/User');
 
-const users = fs.readFileSync('src/data/users.json', 'utf-8');
-const usersJson = JSON.parse(users).filter(value => JSON.stringify(value) !== '{}');
+const db = require('../database/models');
+const User = require('../models/User');
 
 const controller = {
 
-	login: (req,res) => {
+	login: (req, res, next) => {
 		return res.render('./users/login');
 	},
 
-	doLogin: (req, res) => {
-		const userToLogin = User.findByField('email', req.body.email);
-
-		if (userToLogin &&
-			bcrypt.compareSync(req.body.password, userToLogin.password)) {
-				delete userToLogin.password;
-				req.session.userLogged = userToLogin;
-
-				if (req.body.rememberme) {
-					res.cookie('userEmail', req.body.email, {maxAge: ((((1000*60)*60)*24)*365)})
-				}
-
-				res.redirect("./profile");
-		} else {
-			res.render('./users/login', {
-				errors: {
-					email: {
-						msg: 'Las credenciales son invalidas'
-					}
+	doLogin: (req, res, next) => {
+		User.findByEmail(req.body.email)
+			.then(userToLogin => {
+				if (userToLogin &&
+					bcrypt.compareSync(req.body.password, userToLogin.hashed_password)
+				) {
+						delete userToLogin.hashed_password;
+						req.session.userLogged = userToLogin;
+		
+						if (req.body.rememberme) {
+							res.cookie('userEmail', req.body.email, {maxAge: ((((1000*60)*60)*24)*365)})
+						}
+		
+						res.redirect("/");
+				} else {
+					res.render('./users/login', {
+						errors: {
+							email: {
+								msg: 'Las credenciales son invalidas'
+							}
+						}
+					});
 				}
-			});
-		}
+			})
+			.catch(next); // handled by errorMiddleware
 },
 
-	register: (req,res) => {
-		return res.render('./users/register');
+	register: (req, res, next) => {
+		db.Role.findAll()
+			.then(roles => {
+				return res.render('./users/register', {roles});
+			})
+			.catch(next);  // handled by errorMiddleware
 	},
 	
-	registerNew: (req,res) => {
+	registerNew: (req, res, next) => {
 		const validations = validationResult(req);
-        
+
 		if (validations.errors.length > 0) {
+
 			return res.render('./users/register', {
 				errors: validations.mapped(),
 				oldData: req.body
 			})
 		}
 
-		let userInDb = User.findByField('email', req.body.email);
-
-		if (userInDb) {
-			return res.render('./users/register', {
-				errors: {
-					email: {
-						msg: 'Este email ya se encuentra registrado'
-					}
-				},
-				oldData: req.body
-			});
-		}
-
-		let userToCreate = {
-			firstName: req.body.firstName,
-			lastName: req.body.lastName,
+		const userToCreate = {
+			first_name: req.body.firstName,
+			last_name: req.body.lastName,
 			email: req.body.email,
-			phonenumber: req.body.phonenumber,
+			telephone: req.body.phonenumber,
 			address: req.body.address,
-			password: bcrypt.hashSync(req.body.password, 10),
-			image: req.file.filename,
-			category: 'user' // temporaly hardcoded
+			hashed_password: bcrypt.hashSync(req.body.password, 10),
+			avatar: req.file.filename,
+			role_id: 2 // temporaly hardcoded to user
 		};
 
-		User.create(userToCreate);
+		// we let DB check for duplicate emails
+		User.create(userToCreate)
+			.then(createdUser => {
+				res.redirect('/users/login');
+			})
+			.catch(errors => {
+				if (errors.name === "SequelizeUniqueConstraintError" ) {
+					return res.render('./users/register', {
+						errors: {
+							email: {
+								msg: 'Este email ya se encuentra registrado'
+							}
+						},
+						oldData: req.body
+					});
+				}
 
-		res.redirect('/users/login');
+				// let errorMiddleware handle this error
+				next();
+			});
 	},
 
-	profile: (req,res) => {
+	profile: (req, res) => {
 		return res.render('./users/profile');
 	},
 
-	logout: (req,res) => {
+	logout: (req, res) => {
 		res.clearCookie('userEmail');
 		req.session.destroy();
+		delete res.locals.userLogged;
 		return res.redirect('/');
 	}
 
diff --git a/src/data/users.json b/src/data/users.json
deleted file mode 100644
index e1011e0..0000000
--- a/src/data/users.json
+++ /dev/null
@@ -1,79 +0,0 @@
-[
- {
-  "id": 1,
-  "firstName": "User",
-  "lastName": "Admin",
-  "email": "asda@asd.com",
-  "password": "$2a$10$dq9kxSXXKF0KRiOOVmZcE.JxOnJ4M916rz8v376Tix.iisZUCsBHa",
-  "phonenumber": "555-5656",
-  "address": "calle 2222",
-  "category": "admin",
-  "image": "default.png"
- },
- {
-  "id": 2,
-  "firstName": "Paula",
-  "lastName": "Rosendo",
-  "email": "paula_rosendo@gmail.com",
-  "password": "$2a$10$dq9kxSXXKF0KRiOOVmZcE.JxOnJ4M916rz8v376Tix.iisZUCsBHa",
-  "phonenumber": "11-6123-6550",
-  "address": "Duclout 298, Monte Grande",
-  "category": "user",
-  "image": "default.png"
- },
- {
-  "id": 3,
-  "firstName": "Natalia",
-  "lastName": "Gutiérrez",
-  "email": "natalia.gutierrez@hotmail.com",
-  "password": "$2a$10$dq9kxSXXKF0KRiOOVmZcE.JxOnJ4M916rz8v376Tix.iisZUCsBHa",
-  "phonenumber": "11-5334-2345",
-  "address": "Alem 126, Luis Guillón",
-  "category": "user",
-  "image": "default.png"
- },
- {
-  "id": 4,
-  "firstName": "Sandra",
-  "lastName": "Pérez",
-  "email": "sandra_perez@hotmail.com",
-  "password": "$2a$10$dq9kxSXXKF0KRiOOVmZcE.JxOnJ4M916rz8v376Tix.iisZUCsBHa",
-  "phonenumber": "11-5334-6798",
-  "address": "Mariano Moreno 225, Luis Guillón",
-  "category": "user",
-  "image": "default.png"
- },
- {
-  "id": 5,
-  "firstName": "Marta",
-  "lastName": "Gonzalez",
-  "email": "marta.gonzalez@yahoo.com.ar",
-  "password": "$2a$10$dq9kxSXXKF0KRiOOVmZcE.JxOnJ4M916rz8v376Tix.iisZUCsBHa",
-  "phonenumber": "11-4523-9889",
-  "address": "Pellegrini 180, Lomas de Zamora",
-  "category": "user",
-  "image": "default.png"
- },
- {
-  "id": 6,
-  "firstName": "Pablo",
-  "lastName": "Menichini",
-  "email": "pablo@tmp-mail.com",
-  "password": "$2a$10$dq9kxSXXKF0KRiOOVmZcE.JxOnJ4M916rz8v376Tix.iisZUCsBHa",
-  "phonenumber": "123123",
-  "address": "Calle 123",
-  "category": "user",
-  "image": "default.png"
- },
- {
-  "id": 7,
-  "firstName": "Ariel",
-  "lastName": "Mateu",
-  "email": "arieljmateu@gmail.com",
-  "password": "$2a$10$a2g9qxam856m1hfe1QzQ7.KDsVSuXf3N5htQaV1sIBl.oaJU/dsuS",
-  "phonenumber": "2216100799",
-  "password2": "35204585",
-  "address": "136 entre 530 y 531",
-  "image": "1635878085972_img.jpg"
- }
-]
\ No newline at end of file
diff --git a/src/database/db-init.sql b/src/database/db-init.sql
index c366675..7172795 100644
--- a/src/database/db-init.sql
+++ b/src/database/db-init.sql
@@ -213,6 +213,7 @@ CREATE TABLE `users` (
   `created_at` datetime NOT NULL,
   `updated_at` datetime NOT NULL,
   PRIMARY KEY (`id`),
+  UNIQUE KEY `email` (`email`),
   KEY `role_id` (`role_id`),
   CONSTRAINT `users_ibfk_1` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
diff --git a/src/database/models/User.js b/src/database/models/User.js
index bd8caba..21c27bc 100644
--- a/src/database/models/User.js
+++ b/src/database/models/User.js
@@ -17,6 +17,7 @@ module.exports = (sequelize, dataTypes) => {
         },
         email: {
             type: dataTypes.STRING(80),
+            unique: true,
             allowNull: false
         },
         hashed_password: {
@@ -35,18 +36,21 @@ module.exports = (sequelize, dataTypes) => {
             type: dataTypes.STRING(50),
             allowNull: false
         },
-        rol_id: {
+        role_id: {
             type: dataTypes.INTEGER.UNSIGNED,
             allowNull: false
         },
         // created_at: dataTypes.DATETIME,
         // updated_at: dataTypes.DATETIME,
+        // deleted_at: dataTypes.DATETIME,
     };
     const config = {
         tableName: 'users',
         timestamps: true,
+        paranoid: true,
         createdAt: 'created_at',
         updatedAt: 'updated_at',
+        deletedAt: 'deleted_at'
     };
 
     const User = sequelize.define(alias, cols, config);
diff --git a/src/middlewares/cookieLogingMiddleware.js b/src/middlewares/cookieLogingMiddleware.js
new file mode 100644
index 0000000..54f8929
--- /dev/null
+++ b/src/middlewares/cookieLogingMiddleware.js
@@ -0,0 +1,24 @@
+const User = require('../models/User');
+
+
+// If exists cookie with user's email then we automagically log them in
+// (Remember me feature)
+function cookieLogingMiddleware(req, res, next) {
+    const emailInCookie = req.cookies.userEmail;
+    if (emailInCookie) {
+        User.findByEmail(emailInCookie)
+            .then(userFromCookie => {
+                if (userFromCookie) {
+                    delete userFromCookie.password;
+                    req.session.userLogged = userFromCookie;
+                }
+
+                next();
+            })
+            .catch(error => res.send(error));
+    } else {
+        next();
+    }
+}
+
+module.exports = cookieLogingMiddleware;
\ No newline at end of file
diff --git a/src/middlewares/errorMiddleware.js b/src/middlewares/errorMiddleware.js
new file mode 100644
index 0000000..12e98fa
--- /dev/null
+++ b/src/middlewares/errorMiddleware.js
@@ -0,0 +1,11 @@
+// middleware to handle promise errors in controllers
+
+module.exports = (err, req, res, next) => {
+    res.status(err.status || 500);
+
+    if (process.env.NODE_ENV !== 'production') {
+        res.send(err);
+    } else {
+        res.send("Internal server error :(");
+    }
+};
\ No newline at end of file
diff --git a/src/middlewares/userLoggedMiddleware.js b/src/middlewares/userLoggedMiddleware.js
index 1634e28..ca6a509 100644
--- a/src/middlewares/userLoggedMiddleware.js
+++ b/src/middlewares/userLoggedMiddleware.js
@@ -1,14 +1,8 @@
 const User = require('../models/User');
 
-function userLoggedMiddleware (req, res, next) {  
-    let emailInCookie = req.cookies.userEmail;
-    let userFromCookie = User.findByField('email', emailInCookie);
-
-    if (userFromCookie) {
-        delete userFromCookie.password;
-        req.session.userLogged = userFromCookie;
-    }
-
+// We set credentials in res.locals if user is logged in.
+// So it can be access by EJS.
+function userLoggedMiddleware(req, res, next) {
     if (req.session.userLogged) {
         res.locals.userLogged = req.session.userLogged;
     }
diff --git a/src/models/User.js b/src/models/User.js
index 4d264b7..9414308 100644
--- a/src/models/User.js
+++ b/src/models/User.js
@@ -1,55 +1,14 @@
-const { json } = require('express')
-const fs = require('fs')
+const db = require('../database/models');
 
 const User = {
-    fileName: 'src/data/users.json',
-
-    getData: function() {
-        return JSON.parse(fs.readFileSync(this.fileName, 'utf-8'))
-    },
-
-    generateId: function () {
-        let allUsers = this.findAll();
-        let lastUser = allUsers.pop();
-        if (lastUser) {
-        return lastUser.id + 1;
-        } else {
-            return 1;
-        }
-    },
-
-    findAll: function() {
-        return this.getData();
-    },
-
-    findByPk: function (id) {
-        let allUsers = this.findAll();
-        let userFound = allUsers.find(oneUser => oneUser.id === id);
-        return userFound;
-    },
-
-    findByField: function (field, text) {
-        let allUsers = this.findAll();
-        let userFound = allUsers.find(oneUser => oneUser[field] === text);
-        return userFound;
-    },
+    findByEmail: (userEmail) => db.User.findOne({where: {email: userEmail}}),
 
     create: function(userData) {
-        let allUsers = this.findAll();
-        let newUser = {
-            id: this.generateId(),
-            ...userData
-        }
-        allUsers.push(newUser);
-        fs.writeFileSync(this.fileName, JSON.stringify(allUsers, null, ' '));
-        return newUser;
+        return db.User.create(userData);
     },
 
     delete: function(id) {
-        let allUsers = this.findAll();
-        let finalUsers = allUsers.filter(oneUser => oneUser.id !== id);
-        fs.writeFileSync(this.fileName, JSON.stringify(finalUsers, null, ' '));
-        return true;
+        return db.User.destoy({where: {id: id} });
     }
 }
 
diff --git a/src/views/products/products.ejs b/src/views/products/products.ejs
index f5b1862..06a914d 100644
--- a/src/views/products/products.ejs
+++ b/src/views/products/products.ejs
@@ -13,6 +13,10 @@
                 <a class="btn" href="/products/create/">Cargar producto</a>        
             </div>
         <% } %>
+        <form class="search-form" action="/products/" method="GET">
+            <input class="input" name="q" type="text" placeholder="Buscar producto" required>
+            <button class="button-search" type="submit"><span class="fa fa-search"></span></button>
+        </form>    
         <div class="products-list">
             <% productsJson.forEach (product => { %>
                 <article class="product">
